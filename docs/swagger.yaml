basePath: /
definitions:
  api.ChangePasswordRequest:
    properties:
      new_password:
        example: newpassword123
        minLength: 6
        type: string
      old_password:
        example: oldpassword123
        type: string
    required:
    - new_password
    - old_password
    type: object
  api.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  api.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  model.AuthResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/model.User'
    type: object
  model.LoginRequest:
    properties:
      password:
        example: password123
        type: string
      username:
        example: admin
        type: string
    required:
    - password
    - username
    type: object
  model.RefreshTokenRequest:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - token
    type: object
  model.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        minLength: 6
        type: string
      username:
        example: newuser
        maxLength: 32
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  model.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      status:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a distributed service server with JWT authentication.
  title: Distributed Service API
  version: "1.0"
paths:
  /api/v1/auth/change-password:
    post:
      consumes:
      - application/json
      description: Change the password of the authenticated user
      parameters:
      - description: Change password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - auth
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: User login
      tags:
      - auth
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh an existing JWT token
      parameters:
      - description: Refresh token request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Refresh JWT token
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: Registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /api/v1/grpc/protection/circuit-breaker:
    get:
      consumes:
      - application/json
      description: Returns the status of all gRPC circuit breakers
      produces:
      - application/json
      responses:
        "200":
          description: Circuit breaker status
          schema:
            additionalProperties: true
            type: object
      summary: Get gRPC circuit breaker status
      tags:
      - monitoring
  /api/v1/grpc/protection/config:
    get:
      consumes:
      - application/json
      description: Returns the detailed protection configuration for gRPC services
      produces:
      - application/json
      responses:
        "200":
          description: Protection configuration
          schema:
            additionalProperties: true
            type: object
      summary: Get gRPC protection configuration
      tags:
      - monitoring
  /api/v1/grpc/protection/rate-limit:
    get:
      consumes:
      - application/json
      description: Returns the current rate limit configuration and usage
      produces:
      - application/json
      responses:
        "200":
          description: Rate limit status
          schema:
            additionalProperties: true
            type: object
      summary: Get gRPC rate limit status
      tags:
      - monitoring
  /api/v1/grpc/protection/status:
    get:
      consumes:
      - application/json
      description: Returns the current status of gRPC rate limiting and circuit breaker
      produces:
      - application/json
      responses:
        "200":
          description: Protection status
          schema:
            additionalProperties: true
            type: object
      summary: Get gRPC protection status
      tags:
      - monitoring
  /api/v1/users:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create user
      tags:
      - users
  /api/v1/users/{id}:
    delete:
      description: Delete user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Delete user
      tags:
      - users
    get:
      description: Get user details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get user by ID
      tags:
      - users
  /api/v1/users/me:
    get:
      description: Get the profile information of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user info
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
