services:
  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: distributed-service-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: distributed_service
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/mysql-init.sql:/docker-entrypoint-initdb.d/init.sql
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    networks:
      - distributed-network

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: distributed-service-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - distributed-network

  # RabbitMQ 消息队列
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: distributed-service-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"  # 管理界面
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - distributed-network

  # Consul 服务注册与发现
  consul:
    image: hashicorp/consul:1.15
    container_name: distributed-service-consul
    restart: unless-stopped
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    volumes:
      - consul_data:/consul/data
    command: >
      consul agent -server -bootstrap-expect=1 -ui -bind=0.0.0.0 -client=0.0.0.0
      -data-dir=/consul/data -datacenter=dc1
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - distributed-network

  # Jaeger 分布式链路追踪
  jaeger:
    image: jaegertracing/all-in-one:1.57
    container_name: distributed-service-jaeger
    restart: unless-stopped
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger HTTP collector
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
    networks:
      - distributed-network

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: distributed-service-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - distributed-network

  # Grafana 可视化
  grafana:
    image: grafana/grafana:10.0.0
    container_name: distributed-service-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - distributed-network

  # 应用服务
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: distributed-service-app
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "9090:9090"
    volumes:
      - ./config/config-docker.yaml:/app/config/config.yaml
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
      jaeger:
        condition: service_started
    environment:
      - ENV=production
      - NAME=app
    networks:
      - distributed-network

volumes:
  mysql_data:
  redis_data:
  rabbitmq_data:
  consul_data:
  prometheus_data:
  grafana_data:

networks:
  distributed-network:
    driver: bridge 